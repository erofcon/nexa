import streamlit as st
from langchain_core.prompts import PromptTemplate
from st_pages import add_page_title

from src.rag import RagModel
from src.utils import llm, rag

st.set_page_config(page_title='ü¶ú Nexa')

PROMPT_TEMPLATE = """<|im_start|>\nuser\n–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –±–∞–∑–∏—Ä—É—è—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞ —ç—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ:

{context}

---
–û—Ç–≤–µ—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–ª—å–∫–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç: {question}<|im_end|>
"""


# rag = RagModel()


def generate_response(dialogue: str):
    return llm(dialogue, max_tokens=2000, repeat_penalty=1.0)


add_page_title()
st.text("–°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞")

if question := st.chat_input():
    with st.spinner("–ü–æ–¥–æ–∂–¥–∏—Ç–µ ..."):
        output = rag.generate(query_text=question)
        if len(output) == 0 or output[0][1] < 0.7:
            response = "–ù–µ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ —Ç–µ–∫—Å—Ç–∞, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–Ω–æ –æ–ø–∏—Ä–∞—Ç—å—Å—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞."
        else:

            context_text = "\n\n---\n\n".join([doc.page_content for doc, _score in output])

            prompt_template = PromptTemplate(template=PROMPT_TEMPLATE, input_variables=["context", "question"])

            prompt = prompt_template.format(context=context_text, question=question)

            response = generate_response(dialogue=prompt)['choices'][0]['text'].replace('assistant', '').replace(
                'ssistant', '')

        st.write(response)
